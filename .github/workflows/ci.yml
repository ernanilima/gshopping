name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Validate .ciignore
        run: |
          ciignore=$(grep -xvf <(go list ./...) ./app/test/.ciignore || echo "")
          if [ -n "$ciignore" ]; then
            echo "Existem pacotes invalidos para serem ignorados:"
            echo "$ciignore"
            exit 1
          fi

      - name: Run tests
        id: run_tests
        run: |
          test_result=$(go test -coverprofile=coverage.out ./...)
          test_result_one_line=$(echo "$test_result" | tr '\n' ',')
          echo "::set-output name=test_result_one_line::$test_result_one_line"
          echo "$test_result" | grep -E "ok" | awk '{print "OK\t", $2}'

      - name: Validate modules without tests
        run: |
          all_modules_without_tests=$(echo "${{ steps.run_tests.outputs.test_result_one_line }}" | tr ',' '\n' | grep -E "no test files")
          modules_without_tests=$(echo "$all_modules_without_tests" | awk '{print $2}' | grep -xvf ./app/test/.ciignore | awk '{print "NO TEST\t", $0}')
          if [ -n "$modules_without_tests" ]; then
            echo "Existem modulos sem testes:"
            echo "$modules_without_tests"
            exit 1
          fi

      # DEFINIR FUTURAMENTE QUANDO CRIAR TESTES PARA PARA TODOS OS PACOTES
      # - name: Check test coverage
      #   run: |
      #     threshold=98.0
      #     coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
      #     if (( $(echo "$coverage < $threshold" | bc -l) )); then
      #       echo "Test coverage is below the threshold of $threshold%"
      #       exit 1
      #     fi
