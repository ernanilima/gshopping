// Code generated by MockGen. DO NOT EDIT.
// Source: app/controller/controller.go

// Package mock_controller is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	"go.uber.org/mock/gomock"
)

// InsertBrand mocks base method.
func (m *MockController) InsertBrand(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "InsertBrand", w, r)
}

// InsertBrand indicates an expected call of InsertBrand.
func (mr *MockControllerMockRecorder) InsertBrand(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBrand", reflect.TypeOf((*MockController)(nil).InsertBrand), w, r)
}

// EditBrand mocks base method.
func (m *MockController) EditBrand(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "EditBrand", w, r)
}

// EditBrand indicates an expected call of EditBrand.
func (mr *MockControllerMockRecorder) EditBrand(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBrand", reflect.TypeOf((*MockController)(nil).EditBrand), w, r)
}

// DeleteBrand mocks base method.
func (m *MockController) DeleteBrand(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "DeleteBrand", w, r)
}

// DeleteBrand indicates an expected call of DeleteBrand.
func (mr *MockControllerMockRecorder) DeleteBrand(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBrand", reflect.TypeOf((*MockController)(nil).DeleteBrand), w, r)
}

// FindProductByBarcode mocks base method.
func (m *MockController) FindProductByBarcode(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "FindProductByBarcode", w, r)
}

// FindProductByBarcode indicates an expected call of FindProductByBarcode.
func (mr *MockControllerMockRecorder) FindProductByBarcode(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByBarcode", reflect.TypeOf((*MockController)(nil).FindProductByBarcode), w, r)
}

// MockController is a mock of Controller interface.
type MockController struct {
        ctrl     *gomock.Controller
        recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
        mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
        mock := &MockController{ctrl: ctrl}
        mock.recorder = &MockControllerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
        return m.recorder
}

// FindAllBrands mocks base method.
func (m *MockController) FindAllBrands(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "FindAllBrands", w, r)
}

// FindAllBrands indicates an expected call of FindAllBrands.
func (mr *MockControllerMockRecorder) FindAllBrands(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBrands", reflect.TypeOf((*MockController)(nil).FindAllBrands), w, r)
}

// FindAllBrandsByDescription mocks base method.
func (m *MockController) FindAllBrandsByDescription(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "FindAllBrandsByDescription", w, r)
}

// FindAllBrandsByDescription indicates an expected call of FindAllBrandsByDescription.
func (mr *MockControllerMockRecorder) FindAllBrandsByDescription(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBrandsByDescription", reflect.TypeOf((*MockController)(nil).FindAllBrandsByDescription), w, r)
}

// FindBrandById mocks base method.
func (m *MockController) FindBrandById(w http.ResponseWriter, r *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "FindBrandById", w, r)
}

// FindBrandById indicates an expected call of FindBrandById.
func (mr *MockControllerMockRecorder) FindBrandById(w, r interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBrandById", reflect.TypeOf((*MockController)(nil).FindBrandById), w, r)
}