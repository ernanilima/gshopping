// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
        reflect "reflect"

        model "github.com/ernanilima/gshopping/app/model"
        utils "github.com/ernanilima/gshopping/app/utils"
        "go.uber.org/mock/gomock"
        uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
        ctrl     *gomock.Controller
        recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
        mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
        mock := &MockRepository{ctrl: ctrl}
        mock.recorder = &MockRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
        return m.recorder
}

// DeleteBrand mocks base method.
func (m *MockRepository) DeleteBrand(id uuid.UUID) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteBrand", id)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DeleteBrand indicates an expected call of DeleteBrand.
func (mr *MockRepositoryMockRecorder) DeleteBrand(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBrand", reflect.TypeOf((*MockRepository)(nil).DeleteBrand), id)
}

// EditBrand mocks base method.
func (m *MockRepository) EditBrand(arg0 model.Brand) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "EditBrand", arg0)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// EditBrand indicates an expected call of EditBrand.
func (mr *MockRepositoryMockRecorder) EditBrand(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBrand", reflect.TypeOf((*MockRepository)(nil).EditBrand), arg0)
}

// EditProduct mocks base method.
func (m *MockRepository) EditProduct(arg0 model.Product) (model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "EditProduct", arg0)
        ret0, _ := ret[0].(model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// EditProduct indicates an expected call of EditProduct.
func (mr *MockRepositoryMockRecorder) EditProduct(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProduct", reflect.TypeOf((*MockRepository)(nil).EditProduct), arg0)
}

// FindAllBrands mocks base method.
func (m *MockRepository) FindAllBrands(pageable utils.Pageable) utils.Pageable {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindAllBrands", pageable)
        ret0, _ := ret[0].(utils.Pageable)
        return ret0
}

// FindAllBrands indicates an expected call of FindAllBrands.
func (mr *MockRepositoryMockRecorder) FindAllBrands(pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBrands", reflect.TypeOf((*MockRepository)(nil).FindAllBrands), pageable)
}

// FindAllBrandsByDescription mocks base method.
func (m *MockRepository) FindAllBrandsByDescription(description string, pageable utils.Pageable) (utils.Pageable, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindAllBrandsByDescription", description, pageable)
        ret0, _ := ret[0].(utils.Pageable)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindAllBrandsByDescription indicates an expected call of FindAllBrandsByDescription.
func (mr *MockRepositoryMockRecorder) FindAllBrandsByDescription(description, pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBrandsByDescription", reflect.TypeOf((*MockRepository)(nil).FindAllBrandsByDescription), description, pageable)
}

// FindAllProducts mocks base method.
func (m *MockRepository) FindAllProducts(filter string, pageable utils.Pageable) utils.Pageable {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindAllProducts", filter, pageable)
        ret0, _ := ret[0].(utils.Pageable)
        return ret0
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockRepositoryMockRecorder) FindAllProducts(filter, pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockRepository)(nil).FindAllProducts), filter, pageable)
}

// FindAllProductsNotFound mocks base method.
func (m *MockRepository) FindAllProductsNotFound(pageable utils.Pageable) utils.Pageable {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindAllProductsNotFound", pageable)
        ret0, _ := ret[0].(utils.Pageable)
        return ret0
}

// FindAllProductsNotFound indicates an expected call of FindAllProductsNotFound.
func (mr *MockRepositoryMockRecorder) FindAllProductsNotFound(pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProductsNotFound", reflect.TypeOf((*MockRepository)(nil).FindAllProductsNotFound), pageable)
}

// FindAllProductsNotFoundByBarcode mocks base method.
func (m *MockRepository) FindAllProductsNotFoundByBarcode(barcode string, pageable utils.Pageable) (utils.Pageable, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindAllProductsNotFoundByBarcode", barcode, pageable)
        ret0, _ := ret[0].(utils.Pageable)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindAllProductsNotFoundByBarcode indicates an expected call of FindAllProductsNotFoundByBarcode.
func (mr *MockRepositoryMockRecorder) FindAllProductsNotFoundByBarcode(barcode, pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProductsNotFoundByBarcode", reflect.TypeOf((*MockRepository)(nil).FindAllProductsNotFoundByBarcode), barcode, pageable)
}

// FindBrandById mocks base method.
func (m *MockRepository) FindBrandById(id uuid.UUID) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindBrandById", id)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindBrandById indicates an expected call of FindBrandById.
func (mr *MockRepositoryMockRecorder) FindBrandById(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBrandById", reflect.TypeOf((*MockRepository)(nil).FindBrandById), id)
}

// FindProductByBarcode mocks base method.
func (m *MockRepository) FindProductByBarcode(barcode string) (model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindProductByBarcode", barcode)
        ret0, _ := ret[0].(model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindProductByBarcode indicates an expected call of FindProductByBarcode.
func (mr *MockRepositoryMockRecorder) FindProductByBarcode(barcode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByBarcode", reflect.TypeOf((*MockRepository)(nil).FindProductByBarcode), barcode)
}

// FindProductById mocks base method.
func (m *MockRepository) FindProductById(id uuid.UUID) (model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindProductById", id)
        ret0, _ := ret[0].(model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindProductById indicates an expected call of FindProductById.
func (mr *MockRepositoryMockRecorder) FindProductById(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductById", reflect.TypeOf((*MockRepository)(nil).FindProductById), id)
}

// FindTotalBrands mocks base method.
func (m *MockRepository) FindTotalBrands() int32 {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindTotalBrands")
        ret0, _ := ret[0].(int32)
        return ret0
}

// FindTotalBrands indicates an expected call of FindTotalBrands.
func (mr *MockRepositoryMockRecorder) FindTotalBrands() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTotalBrands", reflect.TypeOf((*MockRepository)(nil).FindTotalBrands))
}

// FindTotalProducts mocks base method.
func (m *MockRepository) FindTotalProducts() int32 {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindTotalProducts")
        ret0, _ := ret[0].(int32)
        return ret0
}

// FindTotalProducts indicates an expected call of FindTotalProducts.
func (mr *MockRepositoryMockRecorder) FindTotalProducts() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTotalProducts", reflect.TypeOf((*MockRepository)(nil).FindTotalProducts))
}

// FindTotalProductsNotFound mocks base method.
func (m *MockRepository) FindTotalProductsNotFound() int32 {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindTotalProductsNotFound")
        ret0, _ := ret[0].(int32)
        return ret0
}

// FindTotalProductsNotFound indicates an expected call of FindTotalProductsNotFound.
func (mr *MockRepositoryMockRecorder) FindTotalProductsNotFound() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTotalProductsNotFound", reflect.TypeOf((*MockRepository)(nil).FindTotalProductsNotFound))
}

// InsertBrand mocks base method.
func (m *MockRepository) InsertBrand(arg0 model.Brand) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "InsertBrand", arg0)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// InsertBrand indicates an expected call of InsertBrand.
func (mr *MockRepositoryMockRecorder) InsertBrand(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBrand", reflect.TypeOf((*MockRepository)(nil).InsertBrand), arg0)
}

// InsertProduct mocks base method.
func (m *MockRepository) InsertProduct(arg0 model.Product) (model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "InsertProduct", arg0)
        ret0, _ := ret[0].(model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockRepositoryMockRecorder) InsertProduct(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockRepository)(nil).InsertProduct), arg0)
}