// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
        reflect "reflect"

        model "github.com/ernanilima/gshopping/app/model"
        utils "github.com/ernanilima/gshopping/app/utils"
        "go.uber.org/mock/gomock"
        uuid "github.com/google/uuid"
)

// Insert mocks base method.
func (m *MockRepository) Insert(arg0 model.Brand) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Insert", arg0)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), arg0)
}

// Edit mocks base method.
func (m *MockRepository) Edit(arg0 model.Brand) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Edit", arg0)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockRepository)(nil).Edit), arg0)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id uuid.UUID) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Delete", id)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// FindByBarcode mocks base method.
func (m *MockRepository) FindByBarcode(barcode string) (model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindByBarcode", barcode)
        ret0, _ := ret[0].(model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindByBarcode indicates an expected call of FindByBarcode.
func (mr *MockRepositoryMockRecorder) FindByBarcode(barcode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBarcode", reflect.TypeOf((*MockRepository)(nil).FindByBarcode), barcode)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
        ctrl     *gomock.Controller
        recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
        mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
        mock := &MockRepository{ctrl: ctrl}
        mock.recorder = &MockRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
        return m.recorder
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(pageable utils.Pageable) utils.Pageable {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindAll", pageable)
        ret0, _ := ret[0].(utils.Pageable)
        return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), pageable)
}

// FindByDescription mocks base method.
func (m *MockRepository) FindByDescription(description string, pageable utils.Pageable) (utils.Pageable, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindByDescription", description, pageable)
        ret0, _ := ret[0].(utils.Pageable)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindByDescription indicates an expected call of FindByDescription.
func (mr *MockRepositoryMockRecorder) FindByDescription(description, pageable interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDescription", reflect.TypeOf((*MockRepository)(nil).FindByDescription), description, pageable)
}

// FindById mocks base method.
func (m *MockRepository) FindById(id uuid.UUID) (model.Brand, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindById", id)
        ret0, _ := ret[0].(model.Brand)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRepository)(nil).FindById), id)
}